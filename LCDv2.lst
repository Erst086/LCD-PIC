;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14/10/2024 10:27:46 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x289F      	GOTO       159
_Pulse:
;LCDv2.c,44 :: 		void Pulse() {
;LCDv2.c,45 :: 		E = 1; Delay_ms(10); E = 0; Delay_ms(10);  // Pulso de activación y desactivación del pin E
0x0003	0x1283      	BCF        STATUS, 5
0x0004	0x1303      	BCF        STATUS, 6
0x0005	0x1485      	BSF        PORTA, 1
0x0006	0x300D      	MOVLW      13
0x0007	0x00FC      	MOVWF      R12
0x0008	0x30FB      	MOVLW      251
0x0009	0x00FD      	MOVWF      R13
L_Pulse2:
0x000A	0x0BFD      	DECFSZ     R13, 1
0x000B	0x280A      	GOTO       L_Pulse2
0x000C	0x0BFC      	DECFSZ     R12, 1
0x000D	0x280A      	GOTO       L_Pulse2
0x000E	0x0000      	NOP
0x000F	0x0000      	NOP
0x0010	0x1085      	BCF        PORTA, 1
0x0011	0x300D      	MOVLW      13
0x0012	0x00FC      	MOVWF      R12
0x0013	0x30FB      	MOVLW      251
0x0014	0x00FD      	MOVWF      R13
L_Pulse3:
0x0015	0x0BFD      	DECFSZ     R13, 1
0x0016	0x2815      	GOTO       L_Pulse3
0x0017	0x0BFC      	DECFSZ     R12, 1
0x0018	0x2815      	GOTO       L_Pulse3
0x0019	0x0000      	NOP
0x001A	0x0000      	NOP
;LCDv2.c,46 :: 		}
L_end_Pulse:
0x001B	0x0008      	RETURN
; end of _Pulse
_LCDcommand:
;LCDv2.c,58 :: 		void LCDcommand(unsigned char command) {
;LCDv2.c,59 :: 		RS = 0;  // Configura el pin RS para enviar un comando (0)
0x001C	0x1283      	BCF        STATUS, 5
0x001D	0x1303      	BCF        STATUS, 6
0x001E	0x1005      	BCF        PORTA, 0
;LCDv2.c,60 :: 		DATA_PORT = command;  // Carga el comando en el puerto de datos
0x001F	0x0827      	MOVF       FARG_LCDcommand_command, 0
0x0020	0x0086      	MOVWF      PORTB
;LCDv2.c,61 :: 		Pulse();  // Envía el pulso de confirmación
0x0021	0x2003      	CALL       _Pulse
;LCDv2.c,62 :: 		}
L_end_LCDcommand:
0x0022	0x0008      	RETURN
; end of _LCDcommand
_LCDwriteChar:
;LCDv2.c,65 :: 		void LCDwriteChar(unsigned char character) {
;LCDv2.c,66 :: 		RS = 1;  // Configura el pin RS para enviar datos (1)
0x0023	0x1283      	BCF        STATUS, 5
0x0024	0x1303      	BCF        STATUS, 6
0x0025	0x1405      	BSF        PORTA, 0
;LCDv2.c,67 :: 		DATA_PORT = character;  // Carga el carácter en el puerto de datos
0x0026	0x0826      	MOVF       FARG_LCDwriteChar_character, 0
0x0027	0x0086      	MOVWF      PORTB
;LCDv2.c,68 :: 		Pulse();  // Envía el pulso de confirmación
0x0028	0x2003      	CALL       _Pulse
;LCDv2.c,69 :: 		}
L_end_LCDwriteChar:
0x0029	0x0008      	RETURN
; end of _LCDwriteChar
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x002A	0x1283      	BCF        STATUS, 5
0x002B	0x1303      	BCF        STATUS, 6
0x002C	0x0821      	MOVF       ___DoICPAddr+1, 0
0x002D	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x002E	0x0820      	MOVF       ___DoICPAddr, 0
0x002F	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0030	0x0008      	RETURN
; end of _____DoICP
_LCDclear:
;LCDv2.c,79 :: 		void LCDclear() {
;LCDv2.c,80 :: 		LCDcommand(0b00000001);  // Envía el comando para limpiar la pantalla
0x0031	0x3001      	MOVLW      1
0x0032	0x1283      	BCF        STATUS, 5
0x0033	0x1303      	BCF        STATUS, 6
0x0034	0x00A7      	MOVWF      FARG_LCDcommand_command
0x0035	0x201C      	CALL       _LCDcommand
;LCDv2.c,81 :: 		Delay_ms(30);  // Espera el tiempo necesario para completar la operación
0x0036	0x3027      	MOVLW      39
0x0037	0x00FC      	MOVWF      R12
0x0038	0x30F5      	MOVLW      245
0x0039	0x00FD      	MOVWF      R13
L_LCDclear7:
0x003A	0x0BFD      	DECFSZ     R13, 1
0x003B	0x283A      	GOTO       L_LCDclear7
0x003C	0x0BFC      	DECFSZ     R12, 1
0x003D	0x283A      	GOTO       L_LCDclear7
;LCDv2.c,82 :: 		}
L_end_LCDclear:
0x003E	0x0008      	RETURN
; end of _LCDclear
_LCDwriteMessage:
;LCDv2.c,72 :: 		void LCDwriteMessage(const char* message) {
;LCDv2.c,73 :: 		while(*message) {  // Recorre cada carácter de la cadena
L_LCDwriteMessage5:
0x003F	0x1283      	BCF        STATUS, 5
0x0040	0x1303      	BCF        STATUS, 6
0x0041	0x0822      	MOVF       FARG_LCDwriteMessage_message, 0
0x0042	0x00A0      	MOVWF      ___DoICPAddr
0x0043	0x0823      	MOVF       FARG_LCDwriteMessage_message+1, 0
0x0044	0x00A1      	MOVWF      ___DoICPAddr+1
0x0045	0x202A      	CALL       _____DoICP
0x0046	0x118A      	BCF        PCLATH, 3
0x0047	0x120A      	BCF        PCLATH, 4
0x0048	0x00F0      	MOVWF      R0
0x0049	0x0870      	MOVF       R0, 0
0x004A	0x1903      	BTFSC      STATUS, 2
0x004B	0x2859      	GOTO       L_LCDwriteMessage6
;LCDv2.c,74 :: 		LCDwriteChar(*message++);  // Escribe el carácter y avanza al siguiente
0x004C	0x0822      	MOVF       FARG_LCDwriteMessage_message, 0
0x004D	0x00A0      	MOVWF      ___DoICPAddr
0x004E	0x0823      	MOVF       FARG_LCDwriteMessage_message+1, 0
0x004F	0x00A1      	MOVWF      ___DoICPAddr+1
0x0050	0x202A      	CALL       _____DoICP
0x0051	0x118A      	BCF        PCLATH, 3
0x0052	0x120A      	BCF        PCLATH, 4
0x0053	0x00A6      	MOVWF      FARG_LCDwriteChar_character
0x0054	0x2023      	CALL       _LCDwriteChar
0x0055	0x0AA2      	INCF       FARG_LCDwriteMessage_message, 1
0x0056	0x1903      	BTFSC      STATUS, 2
0x0057	0x0AA3      	INCF       FARG_LCDwriteMessage_message+1, 1
;LCDv2.c,75 :: 		}
0x0058	0x283F      	GOTO       L_LCDwriteMessage5
L_LCDwriteMessage6:
;LCDv2.c,76 :: 		}
L_end_LCDwriteMessage:
0x0059	0x0008      	RETURN
; end of _LCDwriteMessage
_LCDwriteBinary:
;LCDv2.c,96 :: 		void LCDwriteBinary(unsigned char row, unsigned char col, unsigned char binary) {
;LCDv2.c,98 :: 		if (row == 0) {
0x005A	0x1283      	BCF        STATUS, 5
0x005B	0x1303      	BCF        STATUS, 6
0x005C	0x0822      	MOVF       FARG_LCDwriteBinary_row, 0
0x005D	0x3A00      	XORLW      0
0x005E	0x1D03      	BTFSS      STATUS, 2
0x005F	0x2864      	GOTO       L_LCDwriteBinary10
;LCDv2.c,99 :: 		command = 0x80 | col;  // Calcula la posición de la primera fila
0x0060	0x3080      	MOVLW      128
0x0061	0x0423      	IORWF      FARG_LCDwriteBinary_col, 0
0x0062	0x00A5      	MOVWF      LCDwriteBinary_command_L0
;LCDv2.c,100 :: 		} else if (row == 1) {
0x0063	0x286D      	GOTO       L_LCDwriteBinary11
L_LCDwriteBinary10:
0x0064	0x0822      	MOVF       FARG_LCDwriteBinary_row, 0
0x0065	0x3A01      	XORLW      1
0x0066	0x1D03      	BTFSS      STATUS, 2
0x0067	0x286C      	GOTO       L_LCDwriteBinary12
;LCDv2.c,101 :: 		command = 0xC0 | col;  // Calcula la posición de la segunda fila
0x0068	0x30C0      	MOVLW      192
0x0069	0x0423      	IORWF      FARG_LCDwriteBinary_col, 0
0x006A	0x00A5      	MOVWF      LCDwriteBinary_command_L0
;LCDv2.c,102 :: 		} else {
0x006B	0x286D      	GOTO       L_LCDwriteBinary13
L_LCDwriteBinary12:
;LCDv2.c,103 :: 		return;  // Salir si la fila es inválida
0x006C	0x2873      	GOTO       L_end_LCDwriteBinary
;LCDv2.c,104 :: 		}
L_LCDwriteBinary13:
L_LCDwriteBinary11:
;LCDv2.c,106 :: 		LCDcommand(command);  // Envía el comando para colocar el cursor
0x006D	0x0825      	MOVF       LCDwriteBinary_command_L0, 0
0x006E	0x00A7      	MOVWF      FARG_LCDcommand_command
0x006F	0x201C      	CALL       _LCDcommand
;LCDv2.c,107 :: 		LCDwriteChar(binary);  // Escribe el carácter representado por el valor binario
0x0070	0x0824      	MOVF       FARG_LCDwriteBinary_binary, 0
0x0071	0x00A6      	MOVWF      FARG_LCDwriteChar_character
0x0072	0x2023      	CALL       _LCDwriteChar
;LCDv2.c,108 :: 		}
L_end_LCDwriteBinary:
0x0073	0x0008      	RETURN
; end of _LCDwriteBinary
_LCDinit:
;LCDv2.c,49 :: 		void LCDinit() {
;LCDv2.c,50 :: 		Delay_ms(200);  // Espera para asegurar que la LCD esté lista
0x0074	0x3002      	MOVLW      2
0x0075	0x1283      	BCF        STATUS, 5
0x0076	0x1303      	BCF        STATUS, 6
0x0077	0x00FB      	MOVWF      R11
0x0078	0x3004      	MOVLW      4
0x0079	0x00FC      	MOVWF      R12
0x007A	0x30BA      	MOVLW      186
0x007B	0x00FD      	MOVWF      R13
L_LCDinit4:
0x007C	0x0BFD      	DECFSZ     R13, 1
0x007D	0x287C      	GOTO       L_LCDinit4
0x007E	0x0BFC      	DECFSZ     R12, 1
0x007F	0x287C      	GOTO       L_LCDinit4
0x0080	0x0BFB      	DECFSZ     R11, 1
0x0081	0x287C      	GOTO       L_LCDinit4
0x0082	0x0000      	NOP
;LCDv2.c,51 :: 		LCDcommand(0b00111000);  // Configura la LCD en modo 8 bits y 2 líneas
0x0083	0x3038      	MOVLW      56
0x0084	0x00A7      	MOVWF      FARG_LCDcommand_command
0x0085	0x201C      	CALL       _LCDcommand
;LCDv2.c,52 :: 		LCDcommand(0b00001100);  // Enciende la LCD sin mostrar el cursor
0x0086	0x300C      	MOVLW      12
0x0087	0x00A7      	MOVWF      FARG_LCDcommand_command
0x0088	0x201C      	CALL       _LCDcommand
;LCDv2.c,53 :: 		LCDcommand(0b00000110);  // Habilita el desplazamiento automático del cursor a la derecha
0x0089	0x3006      	MOVLW      6
0x008A	0x00A7      	MOVWF      FARG_LCDcommand_command
0x008B	0x201C      	CALL       _LCDcommand
;LCDv2.c,54 :: 		LCDclear();  // Limpia la pantalla de la LCD
0x008C	0x2031      	CALL       _LCDclear
;LCDv2.c,55 :: 		}
L_end_LCDinit:
0x008D	0x0008      	RETURN
; end of _LCDinit
_LCDsetCursor:
;LCDv2.c,85 :: 		void LCDsetCursor(unsigned char row, unsigned char col) {
;LCDv2.c,87 :: 		if (row == 1) {
0x008E	0x1283      	BCF        STATUS, 5
0x008F	0x1303      	BCF        STATUS, 6
0x0090	0x0822      	MOVF       FARG_LCDsetCursor_row, 0
0x0091	0x3A01      	XORLW      1
0x0092	0x1D03      	BTFSS      STATUS, 2
0x0093	0x2897      	GOTO       L_LCDsetCursor8
;LCDv2.c,88 :: 		address = col;  // La primera fila empieza en la dirección 0x00
0x0094	0x0823      	MOVF       FARG_LCDsetCursor_col, 0
0x0095	0x00A4      	MOVWF      LCDsetCursor_address_L0
;LCDv2.c,89 :: 		} else {
0x0096	0x289A      	GOTO       L_LCDsetCursor9
L_LCDsetCursor8:
;LCDv2.c,90 :: 		address = 0x40 + col;  // La segunda fila empieza en la dirección 0x40
0x0097	0x0823      	MOVF       FARG_LCDsetCursor_col, 0
0x0098	0x3E40      	ADDLW      64
0x0099	0x00A4      	MOVWF      LCDsetCursor_address_L0
;LCDv2.c,91 :: 		}
L_LCDsetCursor9:
;LCDv2.c,92 :: 		LCDcommand(0b10000000 | address);  // Envía el comando para posicionar el cursor
0x009A	0x3080      	MOVLW      128
0x009B	0x0424      	IORWF      LCDsetCursor_address_L0, 0
0x009C	0x00A7      	MOVWF      FARG_LCDcommand_command
0x009D	0x201C      	CALL       _LCDcommand
;LCDv2.c,93 :: 		}
L_end_LCDsetCursor:
0x009E	0x0008      	RETURN
; end of _LCDsetCursor
_main:
;LCDv2.c,19 :: 		void main() {
;LCDv2.c,20 :: 		CMCON = 0x07;   // Desactiva los comparadores del microcontrolador para evitar interferencias
0x009F	0x3007      	MOVLW      7
0x00A0	0x1283      	BCF        STATUS, 5
0x00A1	0x1303      	BCF        STATUS, 6
0x00A2	0x009F      	MOVWF      CMCON
;LCDv2.c,21 :: 		TRISB = 0x00;   // Configura PORTB como salida para enviar datos a la LCD
0x00A3	0x1683      	BSF        STATUS, 5
0x00A4	0x0186      	CLRF       TRISB
;LCDv2.c,22 :: 		TRISA = 0x00;   // Configura PORTA como salida para los pines de control
0x00A5	0x0185      	CLRF       TRISA
;LCDv2.c,24 :: 		LCDinit();  // Llama a la función de inicialización de la LCD
0x00A6	0x2074      	CALL       _LCDinit
;LCDv2.c,25 :: 		Delay_ms(200);  // Espera 200 ms para dar tiempo a la LCD a inicializarse
0x00A7	0x3002      	MOVLW      2
0x00A8	0x00FB      	MOVWF      R11
0x00A9	0x3004      	MOVLW      4
0x00AA	0x00FC      	MOVWF      R12
0x00AB	0x30BA      	MOVLW      186
0x00AC	0x00FD      	MOVWF      R13
L_main0:
0x00AD	0x0BFD      	DECFSZ     R13, 1
0x00AE	0x28AD      	GOTO       L_main0
0x00AF	0x0BFC      	DECFSZ     R12, 1
0x00B0	0x28AD      	GOTO       L_main0
0x00B1	0x0BFB      	DECFSZ     R11, 1
0x00B2	0x28AD      	GOTO       L_main0
0x00B3	0x0000      	NOP
;LCDv2.c,28 :: 		LCDclear();  // Limpia la pantalla de la LCD
0x00B4	0x2031      	CALL       _LCDclear
;LCDv2.c,29 :: 		LCDwriteMessage("Hola Mundo  0_o");  // Escribe el mensaje en la primera línea
0x00B5	0x3009      	MOVLW      ?lstr_1_LCDv2
0x00B6	0x00A2      	MOVWF      FARG_LCDwriteMessage_message
0x00B7	0x3001      	MOVLW      hi_addr(?lstr_1_LCDv2)
0x00B8	0x00A3      	MOVWF      FARG_LCDwriteMessage_message+1
0x00B9	0x203F      	CALL       _LCDwriteMessage
;LCDv2.c,30 :: 		LCDsetCursor(1, 15);  // Coloca el cursor en la segunda fila y en la posición 15
0x00BA	0x3001      	MOVLW      1
0x00BB	0x00A2      	MOVWF      FARG_LCDsetCursor_row
0x00BC	0x300F      	MOVLW      15
0x00BD	0x00A3      	MOVWF      FARG_LCDsetCursor_col
0x00BE	0x208E      	CALL       _LCDsetCursor
;LCDv2.c,31 :: 		LCDcommand(0b11000000);  // Comando que mueve el cursor a la segunda línea
0x00BF	0x30C0      	MOVLW      192
0x00C0	0x00A7      	MOVWF      FARG_LCDcommand_command
0x00C1	0x201C      	CALL       _LCDcommand
;LCDv2.c,32 :: 		LCDwriteMessage("By:Ernest");  // Escribe el mensaje en la segunda línea
0x00C2	0x3019      	MOVLW      ?lstr_2_LCDv2
0x00C3	0x00A2      	MOVWF      FARG_LCDwriteMessage_message
0x00C4	0x3001      	MOVLW      hi_addr(?lstr_2_LCDv2)
0x00C5	0x00A3      	MOVWF      FARG_LCDwriteMessage_message+1
0x00C6	0x203F      	CALL       _LCDwriteMessage
;LCDv2.c,33 :: 		Delay_ms(4000);  // Pausa de 4 segundos para que el usuario pueda leer el mensaje
0x00C7	0x3015      	MOVLW      21
0x00C8	0x00FB      	MOVWF      R11
0x00C9	0x304B      	MOVLW      75
0x00CA	0x00FC      	MOVWF      R12
0x00CB	0x30BE      	MOVLW      190
0x00CC	0x00FD      	MOVWF      R13
L_main1:
0x00CD	0x0BFD      	DECFSZ     R13, 1
0x00CE	0x28CD      	GOTO       L_main1
0x00CF	0x0BFC      	DECFSZ     R12, 1
0x00D0	0x28CD      	GOTO       L_main1
0x00D1	0x0BFB      	DECFSZ     R11, 1
0x00D2	0x28CD      	GOTO       L_main1
0x00D3	0x0000      	NOP
;LCDv2.c,36 :: 		LCDclear();  // Limpia nuevamente la pantalla
0x00D4	0x2031      	CALL       _LCDclear
;LCDv2.c,37 :: 		LCDwriteMessage("Clase de Micros");  // Escribe el mensaje en la primera línea
0x00D5	0x30E9      	MOVLW      ?lstr_3_LCDv2
0x00D6	0x00A2      	MOVWF      FARG_LCDwriteMessage_message
0x00D7	0x3000      	MOVLW      hi_addr(?lstr_3_LCDv2)
0x00D8	0x00A3      	MOVWF      FARG_LCDwriteMessage_message+1
0x00D9	0x203F      	CALL       _LCDwriteMessage
;LCDv2.c,38 :: 		LCDwriteBinary(0, 15, 0b11001000); // Escribe un valor binario en la posición especificada
0x00DA	0x01A2      	CLRF       FARG_LCDwriteBinary_row
0x00DB	0x300F      	MOVLW      15
0x00DC	0x00A3      	MOVWF      FARG_LCDwriteBinary_col
0x00DD	0x30C8      	MOVLW      200
0x00DE	0x00A4      	MOVWF      FARG_LCDwriteBinary_binary
0x00DF	0x205A      	CALL       _LCDwriteBinary
;LCDv2.c,39 :: 		LCDcommand(0b11000000);  // Mueve el cursor a la segunda línea
0x00E0	0x30C0      	MOVLW      192
0x00E1	0x00A7      	MOVWF      FARG_LCDcommand_command
0x00E2	0x201C      	CALL       _LCDcommand
;LCDv2.c,40 :: 		LCDwriteMessage("Fes Aragon UNAM");  // Escribe el segundo mensaje en la segunda línea
0x00E3	0x30F9      	MOVLW      ?lstr_4_LCDv2
0x00E4	0x00A2      	MOVWF      FARG_LCDwriteMessage_message
0x00E5	0x3000      	MOVLW      hi_addr(?lstr_4_LCDv2)
0x00E6	0x00A3      	MOVWF      FARG_LCDwriteMessage_message+1
0x00E7	0x203F      	CALL       _LCDwriteMessage
;LCDv2.c,41 :: 		}
L_end_main:
0x00E8	0x28E8      	GOTO       $+0
; end of _main
;LCDv2.c,0 :: ?lstr_3_LCDv2
0x00E9	0x3443 ;?lstr_3_LCDv2+0
0x00EA	0x346C ;?lstr_3_LCDv2+1
0x00EB	0x3461 ;?lstr_3_LCDv2+2
0x00EC	0x3473 ;?lstr_3_LCDv2+3
0x00ED	0x3465 ;?lstr_3_LCDv2+4
0x00EE	0x3420 ;?lstr_3_LCDv2+5
0x00EF	0x3464 ;?lstr_3_LCDv2+6
0x00F0	0x3465 ;?lstr_3_LCDv2+7
0x00F1	0x3420 ;?lstr_3_LCDv2+8
0x00F2	0x344D ;?lstr_3_LCDv2+9
0x00F3	0x3469 ;?lstr_3_LCDv2+10
0x00F4	0x3463 ;?lstr_3_LCDv2+11
0x00F5	0x3472 ;?lstr_3_LCDv2+12
0x00F6	0x346F ;?lstr_3_LCDv2+13
0x00F7	0x3473 ;?lstr_3_LCDv2+14
0x00F8	0x3400 ;?lstr_3_LCDv2+15
; end of ?lstr_3_LCDv2
;LCDv2.c,0 :: ?lstr_4_LCDv2
0x00F9	0x3446 ;?lstr_4_LCDv2+0
0x00FA	0x3465 ;?lstr_4_LCDv2+1
0x00FB	0x3473 ;?lstr_4_LCDv2+2
0x00FC	0x3420 ;?lstr_4_LCDv2+3
0x00FD	0x3441 ;?lstr_4_LCDv2+4
0x00FE	0x3472 ;?lstr_4_LCDv2+5
0x00FF	0x3461 ;?lstr_4_LCDv2+6
0x0100	0x3467 ;?lstr_4_LCDv2+7
0x0101	0x346F ;?lstr_4_LCDv2+8
0x0102	0x346E ;?lstr_4_LCDv2+9
0x0103	0x3420 ;?lstr_4_LCDv2+10
0x0104	0x3455 ;?lstr_4_LCDv2+11
0x0105	0x344E ;?lstr_4_LCDv2+12
0x0106	0x3441 ;?lstr_4_LCDv2+13
0x0107	0x344D ;?lstr_4_LCDv2+14
0x0108	0x3400 ;?lstr_4_LCDv2+15
; end of ?lstr_4_LCDv2
;LCDv2.c,0 :: ?lstr_1_LCDv2
0x0109	0x3448 ;?lstr_1_LCDv2+0
0x010A	0x346F ;?lstr_1_LCDv2+1
0x010B	0x346C ;?lstr_1_LCDv2+2
0x010C	0x3461 ;?lstr_1_LCDv2+3
0x010D	0x3420 ;?lstr_1_LCDv2+4
0x010E	0x344D ;?lstr_1_LCDv2+5
0x010F	0x3475 ;?lstr_1_LCDv2+6
0x0110	0x346E ;?lstr_1_LCDv2+7
0x0111	0x3464 ;?lstr_1_LCDv2+8
0x0112	0x346F ;?lstr_1_LCDv2+9
0x0113	0x3420 ;?lstr_1_LCDv2+10
0x0114	0x3420 ;?lstr_1_LCDv2+11
0x0115	0x3430 ;?lstr_1_LCDv2+12
0x0116	0x345F ;?lstr_1_LCDv2+13
0x0117	0x346F ;?lstr_1_LCDv2+14
0x0118	0x3400 ;?lstr_1_LCDv2+15
; end of ?lstr_1_LCDv2
;LCDv2.c,0 :: ?lstr_2_LCDv2
0x0119	0x3442 ;?lstr_2_LCDv2+0
0x011A	0x3479 ;?lstr_2_LCDv2+1
0x011B	0x343A ;?lstr_2_LCDv2+2
0x011C	0x3445 ;?lstr_2_LCDv2+3
0x011D	0x3472 ;?lstr_2_LCDv2+4
0x011E	0x346E ;?lstr_2_LCDv2+5
0x011F	0x3465 ;?lstr_2_LCDv2+6
0x0120	0x3473 ;?lstr_2_LCDv2+7
0x0121	0x3474 ;?lstr_2_LCDv2+8
0x0122	0x3400 ;?lstr_2_LCDv2+9
; end of ?lstr_2_LCDv2
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003      [25]    _Pulse
0x001C       [7]    _LCDcommand
0x0023       [7]    _LCDwriteChar
0x002A       [7]    _____DoICP
0x0031      [14]    _LCDclear
0x003F      [27]    _LCDwriteMessage
0x005A      [26]    _LCDwriteBinary
0x0074      [26]    _LCDinit
0x008E      [17]    _LCDsetCursor
0x009F      [74]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    PORTA
0x0006       [1]    PORTB
0x000A       [1]    PCLATH
0x001F       [1]    CMCON
0x0020       [2]    ___DoICPAddr
0x0022       [2]    FARG_LCDwriteMessage_message
0x0022       [1]    FARG_LCDsetCursor_row
0x0022       [1]    FARG_LCDwriteBinary_row
0x0023       [1]    FARG_LCDsetCursor_col
0x0023       [1]    FARG_LCDwriteBinary_col
0x0024       [1]    LCDsetCursor_address_L0
0x0024       [1]    FARG_LCDwriteBinary_binary
0x0025       [1]    LCDwriteBinary_command_L0
0x0026       [1]    FARG_LCDwriteChar_character
0x0027       [1]    FARG_LCDcommand_command
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [1]    TRISA
0x0086       [1]    TRISB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x00E9      [16]    ?lstr_3_LCDv2
0x00F9      [16]    ?lstr_4_LCDv2
0x0109      [16]    ?lstr_1_LCDv2
0x0119      [10]    ?lstr_2_LCDv2
